"Heterakis_spumosa", "Mastophorus_muris", "Trichuris_muris",
"Hymenolepis_microstoma", "Catenotaenia_pusilla", "Cysticercus")
## merge worms and dissection table 2016
diss2016 <- merge(diss2016, worms16, all = TRUE)
# rename for homogeneity
names(diss2016)[names(diss2016) %in% "Ectoparasites"] <- "Flea"
diss2016$Capture <- as.Date(diss2016$Capture, "%d.%m.%Y")
diss2016$Dissection <- as.Date(diss2016$Dissection, "%d.%m.%Y")
# merge
mergedMiceTable <- merge(mergedMiceTable, diss2016,
by = c("Mouse_ID"), all = T)
# Check if all rows are NA and delete these rows
which(!rowSums(!is.na(mergedMiceTable)))
mergedMiceTable <- fillGapsAfterMerge(mergedMiceTable)
# Check if all rows are NA and delete these rows
which(!rowSums(!is.na(mergedMiceTable)))
# add missing or wrong latitude/longitude
loc2016 <- read.csv(paste0(pathToMyData, "Cleaned_HMHZ_2016_All.csv" ),
stringsAsFactors=F)
loc2016 <- loc2016[names(loc2016) %in% c( "location", "GPS.coordinates.long", "GPS.coordinates.lat")]
names(loc2016) <- c("Code", "longitude", "latitude")
mergedMiceTable <- merge(mergedMiceTable, loc2016, by = "Code", all.x = TRUE)
# 1. empty lon/lat
mergedMiceTable$Longitude[is.na(mergedMiceTable$Longitude)] =
mergedMiceTable$longitude[is.na(mergedMiceTable$Longitude)]
mergedMiceTable$Latitude[is.na(mergedMiceTable$Latitude)] =
mergedMiceTable$latitude[is.na(mergedMiceTable$Latitude)]
# 2. wrong lon/lat
mergedMiceTable$Latitude[!is.na(mergedMiceTable$Latitude) &
!is.na(mergedMiceTable$latitude) &
mergedMiceTable$Latitude != mergedMiceTable$latitude] =
mergedMiceTable$latitude[!is.na(mergedMiceTable$Latitude) &
!is.na(mergedMiceTable$latitude) &
mergedMiceTable$Latitude != mergedMiceTable$latitude]
mergedMiceTable$Longitude[!is.na(mergedMiceTable$Longitude) &
!is.na(mergedMiceTable$longitude) &
mergedMiceTable$Longitude != mergedMiceTable$longitude] =
mergedMiceTable$longitude[!is.na(mergedMiceTable$Longitude) &
!is.na(mergedMiceTable$longitude) &
mergedMiceTable$Longitude != mergedMiceTable$longitude]
# 3. delete duplicated rows
mergedMiceTable <- unique(mergedMiceTable)
## **********************************************************
## 2017
diss2017 <- read.csv(paste0(pathToMyData, "HZ17_September_Mice_Dissection.csv"),
na.strings=c(""," ","NA"), stringsAsFactors = F)
# correction excel bullshit
diss2017$Feces_weight <- as.numeric(as.character(diss2017$Feces_weight))
diss2017$Feces_weight[diss2017$Feces_weight > 100 & !is.na(diss2017$Feces_weight)] <-
diss2017$Feces_weight[diss2017$Feces_weight > 100 & !is.na(diss2017$Feces_weight)] / 1000
names(diss2017)[names(diss2017) == "Ectoparasites"] <- "Flea"
## Add worms
worms17 <- read.csv2(paste0(pathToMyData, "HZ17_September_Mice_Dissection_Jen_final.csv"),
stringsAsFactors = F)
names(worms17)[names(worms17) %in% "Mesocestoides"] <- "Taenia_martis"
## merge worms and dissection table 2016
diss2017 <- merge(diss2017, worms17,
by = "Mouse_ID", all = TRUE)
diss2017 <- fillGapsAfterMerge(diss2017)
# merge
mergedMiceTable <- merge(mergedMiceTable, diss2017,
by = c("Mouse_ID"), all = T)
# Check if all rows are NA and delete these rows
which(!rowSums(!is.na(mergedMiceTable)))
mergedMiceTable <- fillGapsAfterMerge(mergedMiceTable)
# Check if all rows are NA and delete these rows
which(!rowSums(!is.na(mergedMiceTable)))
## Uniformisation
mergedMiceTable$Sex[grep("female*.", mergedMiceTable$Sex)] <- "F"
mergedMiceTable$Sex[grep("male*.", mergedMiceTable$Sex)] <- "M"
# Add old HI from previous jarda table
oldJarda <- read.csv(paste0(pathToMyData, "HIforEH_May2017.csv"),
stringsAsFactors=F)
# Uniformize IDs
oldJarda$Mouse_ID <- oldJarda$PIN
oldJarda$Mouse_ID <- gsub(pattern = "SK", replacement = "SK_",x = oldJarda$PIN)
# Add ommited samples
toadd <- oldJarda[!oldJarda$Mouse_ID %in% mergedMiceTable$Mouse_ID,]
# Add samples without HI in mergedmicetable but with one in oldJarda
missing <- mergedMiceTable$Mouse_ID[is.na(mergedMiceTable$HI)]
toadd <- rbind(toadd, oldJarda[oldJarda$Mouse_ID %in% missing,])
# setnames and merge
setnames(toadd,
old = c("BW", "L", "LCd",
"Aspiculuris", "Syphacia",
"Trichuris","Taenia"),
new = c("Body_weight", "Body_length", "Tail_length",
"Aspiculuris_tetraptera", "Syphacia_obvelata",
"Trichuris_muris", "Taenia_taeniformis"))
toadd = toadd[names(toadd)%in%c("REGion", "mtBamH", "Zfy2", "SRY1", "Y", "X332", "X347",
"X65", "Tsx", "Btk", "Syap1", "Es1", "Gpd1", "Idh1",
"Mpi", "Np", "Sod1", "Es1C", "Gpd1C", "Idh1C", "MpiC", "NpC",
"Sod1C", "HI_NLoci", "HI", "Mouse_ID")]
mergedMiceTable = merge(mergedMiceTable, toadd, by = "Mouse_ID", all = T)
mergedMiceTable = fillGapsAfterMerge(mergedMiceTable)
# correct error tail length
mergedMiceTable$Tail_length <- as.numeric(mergedMiceTable$Tail_length)
# delete duplicated rows
mergedMiceTable <- unique(mergedMiceTable)
duplicated = mergedMiceTable$Mouse_ID[duplicated(mergedMiceTable$Mouse_ID)]
# Check if all rows are NA and delete these rows
which(!rowSums(!is.na(mergedMiceTable)))
# Hymenolepis
mergedMiceTable$Hymenolepis <- rowSums(
mergedMiceTable[c("Hymenolepis_microstoma", "Hymenolepis_diminiuta")],
na.rm = T)
mergedMiceTable$Hymenolepis[with(mergedMiceTable,
is.na(mergedMiceTable["Hymenolepis_microstoma"]) &
is.na(mergedMiceTable["Hymenolepis_diminiuta"]))] <- NA
# Taenia
mergedMiceTable$Taenia <- rowSums(
mergedMiceTable[c("Taenia_martis", "Taenia_taeniformis",
"Catenotaenia_pusilla", "Cysticercus")],
na.rm = T)
mergedMiceTable$Hymenolepis[with(mergedMiceTable,
is.na(mergedMiceTable["Taenia_martis"]) &
is.na(mergedMiceTable["Taenia_taeniformis"]) &
is.na(mergedMiceTable["Catenotaenia_pusilla"]) &
is.na(mergedMiceTable["Cysticercus"]))] <- NA
# Aspiculuris_Syphacia
mergedMiceTable$Aspiculuris_Syphacia <- rowSums(
mergedMiceTable[c("Syphacia_obvelata", "Aspiculuris_tetraptera", "Mix_Syphacia_Aspiculuris")],
na.rm = T)
mergedMiceTable$Aspiculuris_Syphacia[with(mergedMiceTable,
is.na(mergedMiceTable["Syphacia_obvelata"]) &
is.na(mergedMiceTable["Aspiculuris_tetraptera"]) &
is.na(mergedMiceTable["Mix_Syphacia_Aspiculuris"]))] <- NA
# Trichuris
mergedMiceTable$Trichuris <- mergedMiceTable$Trichuris_muris
# Heterakis
mergedMiceTable$Heterakis <- mergedMiceTable$Heterakis_spumosa
# Mastophorus
mergedMiceTable$Mastophorus <- mergedMiceTable$Mastophorus_muris
## Dataframe to plot worms
WormsDF <- mergedMiceTable[c("Mouse_ID", "Year",
"Hymenolepis", "Taenia", "Aspiculuris_Syphacia",
"Trichuris", "Heterakis", "Mastophorus")]
WormsDF <- melt(WormsDF, id = c("Mouse_ID", "Year"))
WormsDF$value <- as.numeric(as.character(WormsDF$value))
ggplot(data=WormsDF, aes(x = variable, y=log10(value))) +
geom_violin(aes(fill = variable))  +
geom_jitter(size = 0.5, width = .2, alpha = .8) +
theme_classic() +
facet_wrap( ~ Year, nrow = 2) +
theme(text = element_text(size = 15),
axis.text = element_text(angle = 45, hjust = 1))+
theme(legend.position="none")
# Final cleaning, and save!
mergedMiceTable$Longitude <- as.numeric(mergedMiceTable$Longitude)
mergedMiceTable$Latitude <- as.numeric(mergedMiceTable$Latitude)
# Check if all rows are NA and delete these rows
which(!rowSums(!is.na(mergedMiceTable)))
# wildpark Schorfheide (not needed, test)
wsh <- c(paste0("AA_000", 1:9), paste0("AA_00", 10:46))
# apodemus caught in 2016
apd <- c("A_0001", "A_0002", "A_0003")
# useless info
useless <- c(wsh, apd)
mergedMiceTable <- mergedMiceTable[!(mergedMiceTable$Mouse_ID %in% useless),]
# Check if all rows are NA and delete these rows
which(!rowSums(!is.na(mergedMiceTable)))
# correct body length/weight
mergedMiceTable$Body_length <- as.numeric(mergedMiceTable$Body_length)
mergedMiceTable$Body_weight <- as.numeric(mergedMiceTable$Body_weight)
# Check if all rows are NA and delete these rows
which(!rowSums(!is.na(mergedMiceTable)))
# Manual correction
mergedMiceTable$Body_weight[!is.na(mergedMiceTable$Body_weight) &
mergedMiceTable$Body_weight > 100] <-
mergedMiceTable$Body_weight[!is.na(mergedMiceTable$Body_weight) &
mergedMiceTable$Body_weight > 100] / 1000
mergedMiceTable$Body_length[which(mergedMiceTable$Body_length < 20)] <-
mergedMiceTable$Body_length[which(mergedMiceTable$Body_length < 20)] * 10
# Body condition index as log body mass/log body length (Hayes et al. 2014)
mergedMiceTable$BCI <- log(mergedMiceTable$Body_weight) / log(mergedMiceTable$Body_length)
# Correct wrong HI (>1)
mergedMiceTable$HI[mergedMiceTable$HI > 1 & !is.na(mergedMiceTable$HI)] <-
mergedMiceTable$HI[mergedMiceTable$HI > 1 & !is.na(mergedMiceTable$HI)]/1000
# Correct wrong Long/Lat: 1. wrong multiplicative factor
mergedMiceTable$Longitude[mergedMiceTable$Longitude > 100 &
!is.na(mergedMiceTable$Longitude)] <-
mergedMiceTable$Longitude[mergedMiceTable$Longitude > 100 &
!is.na(mergedMiceTable$Longitude)] / 1000
mergedMiceTable$Latitude[mergedMiceTable$Latitude > 100 &
!is.na(mergedMiceTable$Latitude)] <-
mergedMiceTable$Latitude[mergedMiceTable$Latitude > 100 &
!is.na(mergedMiceTable$Latitude)] / 1000
# Correct wrong Long/Lat: 2. wrong lat/lon inversion
mergedMiceTable$Longitude.temp <- mergedMiceTable$Longitude
mergedMiceTable$Longitude[!is.na(mergedMiceTable$Longitude) &
mergedMiceTable$Longitude >= 30] =
mergedMiceTable$Latitude[!is.na(mergedMiceTable$Longitude) &
mergedMiceTable$Longitude >= 30]
mergedMiceTable$Latitude[!is.na(mergedMiceTable$Latitude) &
mergedMiceTable$Latitude <= 20] =
mergedMiceTable$Longitude.temp[!is.na(mergedMiceTable$Latitude) &
mergedMiceTable$Latitude <= 20]
mergedMiceTable =
mergedMiceTable[ , -which(names(mergedMiceTable) %in% c("Longitude.temp"))]
# add farm (TODO better localisation)
mergedMiceTable$farm <- paste0(mergedMiceTable$Longitude, mergedMiceTable$Latitude)
## remove empty rows
mergedMiceTable <- mergedMiceTable[!is.na(mergedMiceTable$Mouse_ID),]
## remove duplicated rows
mergedMiceTable <- unique(mergedMiceTable)
## Correct duplicated mice by hand
duplicated = mergedMiceTable$Mouse_ID[duplicated(mergedMiceTable$Mouse_ID)]
## 26 June 2018, add Jarda new csv
missingMice = mergedMiceTable$Mouse_ID[is.na(mergedMiceTable$HI)]
newCsv = read.csv(paste0(pathToMyData, "EmanuelData_26061018.csv"),
stringsAsFactors=F)
newCsv$PIN = gsub("SK", "SK_", newCsv$PIN)
## Correct previous mistakes before merging for Latitude, Longitude, Transect, Sex, Code
names(newCsv)[names(newCsv) %in% c("PIN", "X_Longit", "Y_Latit")] =
c("Mouse_ID", "Longitude", "Latitude")
dataToAdd = newCsv[!newCsv$Mouse_ID %in% mergedMiceTable$Mouse_ID |
newCsv$Mouse_ID %in% missingMice,]
mergedMiceTable =  merge(mergedMiceTable, dataToAdd, by = "Mouse_ID", all = T)
mergedMiceTable = fillGapsAfterMerge(mergedMiceTable)
# correct year manually
mergedMiceTable$Year[
mergedMiceTable$Mouse_ID %in% c("SK_2903", "SK_2904")] <- 2014
return(mergedMiceTable)
mergedMiceTable
write.csv(mergedMiceTable, "../../Data_important/mergedMiceTable13august2018.csv", row.names = F)
miceTable <- read.csv("../../Data_important/mergedMiceTable13august2018.csv")
merge(mergedData, miceTable, by = "EH_ID", all.x = T)
rawData <- read.csv("../LorenzoRAW/CSVFiles/TotalLorenzo.csv", stringsAsFactors = F,
na.strings = c("NA", "", " ", "-"))
##### Clean data #####
# Column file name
names(rawData)[names(rawData) == "QPCR01.06.2018.XLS.csv"] <- "fileName"
# Annoying spaces
rawData[,names(rawData)  == "fileName"] <- gsub(" ", "", rawData[,names(rawData) == "fileName"])
rawData[,names(rawData)  == "Target.SYBR"] <- gsub(" ", "", rawData[,names(rawData) == "Target.SYBR"])
# Remove inside headers
rawData <- rawData[rawData$Name != "Name",]
# Remove samples with no Ct value
rawData <- rawData[!is.na(rawData$Ct.SYBR),]
# Remove samples with no mean Ct (means that only one sample worked)
rawData <- rawData[!is.na(rawData$Ct.Mean.SYBR),]
# Remove controls (were used before)
rawData <- rawData[!rawData$Name %in% c("water", "NTC"),]
# manual correction
rawData$Name[rawData$Name == "359"] <- "ILWE_AA_0359"
rawData$Name[rawData$Name == "ILWE_AA_242"] <- "ILWE_AA_0242"
rawData$Name[rawData$Name == "ILWE_AA_0,48"] <- "ILWE_AA_0348"
rawData$Name[rawData$Name == "ILWE_AA_0134"] <- "ILWE_AA_0379"
# likely manual mistake
rawData[rawData$Pos %in% c("B4", "B5", "B6") &
rawData$fileName == "QPCR14.06.2018.XLS.csv", "Name"] <- "CEWE_AA_0424"
# Add full name of sample (tissue + mouseID + eimeriaOrmouse primers + plate)
rawData$fullName <- paste0(rawData$Name, "_", rawData$Target.SYBR, "_",  rawData$fileName)
# Add tissue and Mouse_ID
x <- strsplit(as.character(rawData$Name), "_", 1)
rawData$tissue <- sapply( x, "[", 1)
rawData$Mouse_ID <- paste0("AA_", sapply( x, "[", 3))
##### Select correct data #####
# How many values per plate per fullname? (should be 3 max)
library(dplyr)
keepOnlyTriplicates <- rawData %>%
group_by(fullName)%>%
count()
paste0("Problem with ", pull(keepOnlyTriplicates[keepOnlyTriplicates$n > 3,c("fullName")]))
rawData <- rawData[!rawData$fullName %in%
pull(
keepOnlyTriplicates[keepOnlyTriplicates$n > 3,
c("fullName")]),]
# Keep one value per plate per fullName (so per triplicate)
sumData <- rawData[!duplicated(rawData[c("fullName")]),]
# Choose what to do when several plates (choose based on sd or date?)
# in case of repeated samples, take the first one that worked (sd < 3)
# "Checking the files (not all), Lorenzo made new attempts when the variability
# among replicates was too high (Sd >3) maybe would be nice to include the Sd
# value for each sample as a criteria for selection of the data...
# He replicate complete plates, so in most of the cases he include samples even
# when in the previous attempt they had a good result"
sumData$IdTargetTissue <- paste(sumData$Mouse_ID, sumData$Target.SYBR, sumData$tissue)
duplicatedData <- unique(sumData$IdTargetTissue[duplicated(sumData$IdTargetTissue)])
# Split in 2 to work only on duplicated DF
myData1 <- sumData[!sumData$IdTargetTissue %in% duplicatedData, ]
myData2 <- sumData[sumData$IdTargetTissue %in% duplicatedData, ]
# keep the lower sd for each sample "IdTargetTissue"
myData3 <- data.frame()
for (i in unique(myData2$IdTargetTissue)){
sub <- myData2[myData2$IdTargetTissue == i,]
myData3 <- rbind(myData3, sub[sub$Ct.Dev..SYBR %in% min(sub$Ct.Dev..SYBR),])
}
# Unique values here:
sumData <- rbind(myData1, myData3)
## Calculate deltaCt per plate
sumDataMouse <- sumData[sumData$Target.SYBR == "mouse",]
sumDataEimeria <- sumData[sumData$Target.SYBR == "eimeria",]
mergedData <- merge(sumDataEimeria, sumDataMouse, by = c("Mouse_ID", "fileName", "tissue"))
mergedData$deltaCt <- as.numeric(mergedData$Ct.Mean.SYBR.x) - as.numeric(mergedData$Ct.Mean.SYBR.y)
library(ggplot2)
ggplot(mergedData, aes(x = mergedData$Mouse_ID, y = mergedData$deltaCt)) +
geom_point(aes(col = mergedData$tissue))
# What is positive? cf mert
# Add HI to see and pray
miceTable <- read.csv("../../Data_important/mergedMiceTable13august2018.csv")
merge(mergedData, miceTable, by = "Mouse_ID", all.x = T)
miceTable$Mouse_ID
merge(mergedData, miceTable, by = "Mouse_ID", all.x = T)
fullqPCR2017 <- merge(mergedData, miceTable, by = "Mouse_ID", all.x = T)
View(fullqPCR2017)
rawData <- read.csv("../LorenzoRAW/CSVFiles/TotalLorenzo.csv", stringsAsFactors = F,
na.strings = c("NA", "", " ", "-"))
##### Clean data #####
# Column file name
names(rawData)[names(rawData) == "QPCR01.06.2018.XLS.csv"] <- "fileName"
# Annoying spaces
rawData[,names(rawData)  == "fileName"] <- gsub(" ", "", rawData[,names(rawData) == "fileName"])
rawData[,names(rawData)  == "Target.SYBR"] <- gsub(" ", "", rawData[,names(rawData) == "Target.SYBR"])
# Remove inside headers
rawData <- rawData[rawData$Name != "Name",]
# Remove samples with no Ct value
rawData <- rawData[!is.na(rawData$Ct.SYBR),]
# Remove samples with no mean Ct (means that only one sample worked)
rawData <- rawData[!is.na(rawData$Ct.Mean.SYBR),]
# Remove controls (were used before)
rawData <- rawData[!rawData$Name %in% c("water", "NTC"),]
# manual correction
rawData$Name[rawData$Name == "359"] <- "ILWE_AA_0359"
rawData$Name[rawData$Name == "ILWE_AA_242"] <- "ILWE_AA_0242"
rawData$Name[rawData$Name == "ILWE_AA_0,48"] <- "ILWE_AA_0348"
rawData$Name[rawData$Name == "ILWE_AA_0134"] <- "ILWE_AA_0379"
# likely manual mistake
rawData[rawData$Pos %in% c("B4", "B5", "B6") &
rawData$fileName == "QPCR14.06.2018.XLS.csv", "Name"] <- "CEWE_AA_0424"
# Add full name of sample (tissue + mouseID + eimeriaOrmouse primers + plate)
rawData$fullName <- paste0(rawData$Name, "_", rawData$Target.SYBR, "_",  rawData$fileName)
# Add tissue and Mouse_ID
x <- strsplit(as.character(rawData$Name), "_", 1)
rawData$tissue <- sapply( x, "[", 1)
rawData$Mouse_ID <- paste0("AA_", sapply( x, "[", 3))
##### Select correct data #####
# How many values per plate per fullname? (should be 3 max)
library(dplyr)
keepOnlyTriplicates <- rawData %>%
group_by(fullName)%>%
count()
paste0("Problem with ", pull(keepOnlyTriplicates[keepOnlyTriplicates$n > 3,c("fullName")]))
rawData <- rawData[!rawData$fullName %in%
pull(
keepOnlyTriplicates[keepOnlyTriplicates$n > 3,
c("fullName")]),]
# Keep one value per plate per fullName (so per triplicate)
sumData <- rawData[!duplicated(rawData[c("fullName")]),]
# Choose what to do when several plates (choose based on sd or date?)
# in case of repeated samples, take the first one that worked (sd < 3)
# "Checking the files (not all), Lorenzo made new attempts when the variability
# among replicates was too high (Sd >3) maybe would be nice to include the Sd
# value for each sample as a criteria for selection of the data...
# He replicate complete plates, so in most of the cases he include samples even
# when in the previous attempt they had a good result"
sumData$IdTargetTissue <- paste(sumData$Mouse_ID, sumData$Target.SYBR, sumData$tissue)
duplicatedData <- unique(sumData$IdTargetTissue[duplicated(sumData$IdTargetTissue)])
# Split in 2 to work only on duplicated DF
myData1 <- sumData[!sumData$IdTargetTissue %in% duplicatedData, ]
myData2 <- sumData[sumData$IdTargetTissue %in% duplicatedData, ]
# keep the lower sd for each sample "IdTargetTissue"
myData3 <- data.frame()
for (i in unique(myData2$IdTargetTissue)){
sub <- myData2[myData2$IdTargetTissue == i,]
myData3 <- rbind(myData3, sub[sub$Ct.Dev..SYBR %in% min(sub$Ct.Dev..SYBR),])
}
# Unique values here:
sumData <- rbind(myData1, myData3)
## Calculate deltaCt per plate
sumDataMouse <- sumData[sumData$Target.SYBR == "mouse",]
sumDataEimeria <- sumData[sumData$Target.SYBR == "eimeria",]
mergedData <- merge(sumDataEimeria, sumDataMouse, by = c("Mouse_ID", "fileName", "tissue"))
mergedData$deltaCt <- as.numeric(mergedData$Ct.Mean.SYBR.x) - as.numeric(mergedData$Ct.Mean.SYBR.y)
library(ggplot2)
ggplot(mergedData, aes(x = mergedData$Mouse_ID, y = mergedData$deltaCt)) +
geom_point(aes(col = mergedData$tissue))
# What is positive? cf mert
# Add HI to see and pray
miceTable <- read.csv("../../Data_important/mergedMiceTable13august2018.csv")
fullqPCR2017 <- merge(mergedData, miceTable, by = "Mouse_ID", all.x = T)
ggplot(mergedData, aes(x = mergedData$Mouse_ID, y = mergedData$deltaCt)) +
geom_point(aes(col = mergedData$tissue))
rawData <- read.csv("../LorenzoRAW/CSVFiles/TotalLorenzo.csv", stringsAsFactors = F,
na.strings = c("NA", "", " ", "-"))
##### Clean data #####
# Column file name
names(rawData)[names(rawData) == "QPCR01.06.2018.XLS.csv"] <- "fileName"
setwd("../raw_data/Eimeria_detection/raw_qPCR/")
rawData <- read.csv("../LorenzoRAW/CSVFiles/TotalLorenzo.csv", stringsAsFactors = F,
na.strings = c("NA", "", " ", "-"))
rawData <- read.csv("../LorenzoRAW/CSVFiles/TotalLorenzo.csv", stringsAsFactors = F,
na.strings = c("NA", "", " ", "-"))
rawData <- read.csv("../raw_qPCR/LorenzoRAW/CSVFiles/TotalLorenzo.csv", stringsAsFactors = F,
na.strings = c("NA", "", " ", "-"))
##### Clean data #####
# Column file name
names(rawData)[names(rawData) == "QPCR01.06.2018.XLS.csv"] <- "fileName"
# Annoying spaces
rawData[,names(rawData)  == "fileName"] <- gsub(" ", "", rawData[,names(rawData) == "fileName"])
rawData[,names(rawData)  == "Target.SYBR"] <- gsub(" ", "", rawData[,names(rawData) == "Target.SYBR"])
# Remove inside headers
rawData <- rawData[rawData$Name != "Name",]
rawData <- read.csv("../raw_qPCR/LorenzoRAW/CSVFiles/TotalLorenzo.csv", stringsAsFactors = F,
na.strings = c("NA", "", " ", "-"))
##### Clean data #####
# Column file name
names(rawData)[names(rawData) == "QPCR01.06.2018.XLS.csv"] <- "fileName"
# Annoying spaces
rawData[,names(rawData)  == "fileName"] <- gsub(" ", "", rawData[,names(rawData) == "fileName"])
rawData[,names(rawData)  == "Target.SYBR"] <- gsub(" ", "", rawData[,names(rawData) == "Target.SYBR"])
# Remove inside headers
rawData <- rawData[rawData$Name != "Name",]
# Remove samples with no Ct value
rawData <- rawData[!is.na(rawData$Ct.SYBR),]
# Remove samples with no mean Ct (means that only one sample worked)
rawData <- rawData[!is.na(rawData$Ct.Mean.SYBR),]
# Remove controls (were used before)
rawData <- rawData[!rawData$Name %in% c("water", "NTC"),]
# manual correction
rawData$Name[rawData$Name == "359"] <- "ILWE_AA_0359"
rawData$Name[rawData$Name == "ILWE_AA_242"] <- "ILWE_AA_0242"
rawData$Name[rawData$Name == "ILWE_AA_0,48"] <- "ILWE_AA_0348"
rawData$Name[rawData$Name == "ILWE_AA_0134"] <- "ILWE_AA_0379"
# likely manual mistake
rawData[rawData$Pos %in% c("B4", "B5", "B6") &
rawData$fileName == "QPCR14.06.2018.XLS.csv", "Name"] <- "CEWE_AA_0424"
# Add full name of sample (tissue + mouseID + eimeriaOrmouse primers + plate)
rawData$fullName <- paste0(rawData$Name, "_", rawData$Target.SYBR, "_",  rawData$fileName)
# Add tissue and Mouse_ID
x <- strsplit(as.character(rawData$Name), "_", 1)
rawData$tissue <- sapply( x, "[", 1)
rawData$Mouse_ID <- paste0("AA_", sapply( x, "[", 3))
# How many values per plate per fullname? (should be 3 max)
library(dplyr)
keepOnlyTriplicates <- rawData %>%
group_by(fullName)%>%
count()
paste0("Problem with ", pull(keepOnlyTriplicates[keepOnlyTriplicates$n > 3,c("fullName")]))
rawData <- rawData[!rawData$fullName %in%
pull(
keepOnlyTriplicates[keepOnlyTriplicates$n > 3,
c("fullName")]),]
# Keep one value per plate per fullName (so per triplicate)
sumData <- rawData[!duplicated(rawData[c("fullName")]),]
sumData$IdTargetTissue <- paste(sumData$Mouse_ID, sumData$Target.SYBR, sumData$tissue)
duplicatedData <- unique(sumData$IdTargetTissue[duplicated(sumData$IdTargetTissue)])
# Split in 2 to work only on duplicated DF
myData1 <- sumData[!sumData$IdTargetTissue %in% duplicatedData, ]
myData2 <- sumData[sumData$IdTargetTissue %in% duplicatedData, ]
# keep the lower sd for each sample "IdTargetTissue"
myData3 <- data.frame()
for (i in unique(myData2$IdTargetTissue)){
sub <- myData2[myData2$IdTargetTissue == i,]
myData3 <- rbind(myData3, sub[sub$Ct.Dev..SYBR %in% min(sub$Ct.Dev..SYBR),])
}
# Unique values here:
sumData <- rbind(myData1, myData3)
sumDataMouse <- sumData[sumData$Target.SYBR == "mouse",]
sumDataEimeria <- sumData[sumData$Target.SYBR == "eimeria",]
mergedData <- merge(sumDataEimeria, sumDataMouse, by = c("Mouse_ID", "fileName", "tissue"))
mergedData$deltaCt <- as.numeric(mergedData$Ct.Mean.SYBR.x) - as.numeric(mergedData$Ct.Mean.SYBR.y)
library(ggplot2)
ggplot(mergedData, aes(x = mergedData$Mouse_ID, y = mergedData$deltaCt)) +
geom_point(aes(col = mergedData$tissue))
# Add HI to see and pray
miceTable <- read.csv("../../Data_important/mergedMiceTable13august2018.csv")
# Add HI to see and pray
miceTable <- read.csv("../../../../Data_important/mergedMiceTable13august2018.csv")
fullqPCR2017 <- merge(mergedData, miceTable, by = "Mouse_ID", all.x = T)
ggplot(mergedData, aes(x = mergedData$Mouse_ID, y = mergedData$deltaCt)) +
geom_point(aes(col = mergedData$tissue))
ggplot(fullqPCR2017, aes(x = fullqPCR2017$HI, y = fullqPCR2017$deltaCt)) +
geom_point(aes(col = fullqPCR2017$tissue))
ggplot(fullqPCR2017, aes(x = fullqPCR2017$HI, y = fullqPCR2017$deltaCt)) +
geom_point(aes(col = fullqPCR2017$tissue)) +
theme_bw()
ggplot(fullqPCR2017, aes(x = fullqPCR2017$HI, y = fullqPCR2017$deltaCt)) +
geom_point(aes(col = fullqPCR2017$tissue)) +
geom_smooth() +
theme_bw()
ggplot(fullqPCR2017, aes(x = fullqPCR2017$HI, y = fullqPCR2017$deltaCt,
col = fullqPCR2017$tissue)) +
geom_point() +
geom_smooth() +
theme_bw()
ggplot(fullqPCR2017[fullqPCR2017$deltaCt < 6,],
aes(x = HI, y = deltaCt, col = tissue)) +
geom_point() +
geom_smooth() +
theme_bw()
# 6 as first approx
fullqPCR2017[fullqPCR2017$deltaCt < 6,]
# 6 as first approx
positive <- fullqPCR2017[fullqPCR2017$deltaCt < 6,]
ggplot(positive,
aes(x = HI, y = deltaCt, col = tissue)) +
geom_point() +
geom_smooth() +
theme_bw()
ggplot(positive,
aes(x = positive$HI, y = positive$deltaCt, col = positive$tissue)) +
geom_point() +
geom_smooth() +
theme_bw()
positive$HI
positive$deltaCt
ggplot(positive,
aes(x = positive$HI, y = positive$deltaCt, col = positive$tissue)) +
geom_point() +
# geom_smooth() +
theme_bw()

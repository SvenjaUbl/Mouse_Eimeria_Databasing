mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - 6),  "green", "darkgreen", "darkorange", "yellow", "hotpink",  "grey")
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = 1,
cex = 1, bg = mycols)
legend(5, -20, colnames(ind.hap), fill = mycols, pch=3, ncol=3, cex = 0.6)
mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - 6),  "green", "darkgreen", "darkorange", "yellow", "hotpink",  "grey")
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = 1,
cex = 1, bg = mycols)
legend(5, -25, colnames(ind.hap), fill = mycols, pch=3, ncol=3, cex = 0.6)
mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - 6),  "green", "darkgreen", "darkorange", "yellow", "hotpink",  "grey")
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = 1,
cex = 1, bg = mycols)
legend(5, -25, colnames(ind.hap), fill = mycols, pch=3, ncol=2, cex = 0.6)
mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - 6),  "green", "darkgreen", "darkorange", "yellow", "hotpink",  "grey")
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = 1,
cex = 1, bg = mycols)
legend(15, -15, colnames(ind.hap), fill = mycols, pch=3, ncol=2, cex = 0.6)
mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - 6),  "green", "darkgreen", "darkorange", "yellow", "hotpink",  "grey")
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = 1,
cex = 1, bg = mycols)
legend(15, -10, colnames(ind.hap), fill = mycols, pch=3, ncol=2, cex = 0.6)
rm(list=ls())
# Libraries:
library(RCurl)
library(ggmap)
library(pegas)
library(msa)
library(RColorBrewer)
library(Biostrings)
library(IRanges)
library(XVector)
#####################################################################################
source("https://raw.githubusercontent.com/derele/Mouse_Eimeria_Databasing/master/R/HMHZ_Functions.R")
GenDF <- make.gen.DF()
VicAlign10 <- "/home/victor/Dokumente/Sequences/Samples_2014_2015/Haplotype_network/Concatenated_Haplotype_060917.fasta"
VicAlign10 <- "/home/victor/Dokumente/Sequences/Samples_2014_2015/Haplotype_network/Concatenated_Haplotype_060917.fasta"
d <- ape::read.dna(VicAlign10, format = "fasta")
seqnames <- data.frame(Mouse_ID = labels(d))
seqnames
matchname <- merge(seqnames, GenDF, by = "Mouse_ID", all.x = TRUE, sort = FALSE)
matchname$HI <- round(matchname$HI, 2)
matchname[grep("E_", matchname$Mouse_ID), ]$HI <- as.character(matchname[grep("E_", matchname$Mouse_ID), ]$Mouse_ID)
matchname[which(is.na(matchname$HI)),]$HI <- "unknow_yet"
match <- merge(seqnames, matchname, by = "Mouse_ID", sort = FALSE)
rownames(d) <- match$HI
e <- dist.dna(d)
h <- pegas::haplotype(d)
h <- sort(h, what = "label")
(net <- pegas::haploNet(h))
ind.hap<-with(
stack(setNames(attr(h, "index"), rownames(h))),
table(hap=ind, pop=rownames(d)[values])
)
mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - 5),  "green", "darkgreen", "darkorange", "hotpink",  "grey")
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = 1,
cex = 1, bg = mycols)
legend(15, -10, colnames(ind.hap), fill = mycols, pch=3, ncol=2, cex = 0.6) #+ scale_color_gradient("Hybrid\nindex", high="red",low="blue")
#}
VicAlign11 <- "/home/victor/Dokumente/Sequences/Samples_2014_2015/Haplotype_network/Concatenated_Haplotype_060917.2.fasta"
d <- ape::read.dna(VicAlign11, format = "fasta")
seqnames <- data.frame(Mouse_ID = labels(d))
matchname <- merge(seqnames, GenDF, by = "Mouse_ID", all.x = TRUE, sort = FALSE)
matchname$HI <- round(matchname$HI, 2)
matchname[grep("E_", matchname$Mouse_ID), ]$HI <- as.character(matchname[grep("E_", matchname$Mouse_ID), ]$Mouse_ID)
matchname[which(is.na(matchname$HI)),]$HI <- "unknow_yet"
match <- merge(seqnames, matchname, by = "Mouse_ID", sort = FALSE)
rownames(d) <- match$HI
e <- dist.dna(d)
h <- pegas::haplotype(d)
h <- sort(h, what = "label")
(net <- pegas::haploNet(h))
ind.hap<-with(
stack(setNames(attr(h, "index"), rownames(h))),
table(hap=ind, pop=rownames(d)[values])
)
mycols <- c(colorRampPalette(c("blue", "red"))(ncol(ind.hap) - 6),  "green", "darkgreen", "darkorange", "yellow", "hotpink",  "grey")
plot(net, size = attr(net, "freq"), pie = ind.hap, fast = TRUE, scale.ratio = 1,
cex = 1, bg = mycols)
legend(15, -10, colnames(ind.hap), fill = mycols, pch=3, ncol=2, cex = 0.6)
rm(list=ls())
library("DescTools")
?BinomCI
?fisher.test()
Detection <- matrix(c(18,32,188,174), 2,2)
Detection
Detection <- matrix(c(18,188,32,174), 2,2)
Detection
fisher.test(Detection)
##PCR
BinomCI(x=18, n=188, conf.level=0.95, method="clopper-pearson")
##PCR
BinomCI(x=18, n=206, conf.level=0.95, method="clopper-pearson")
##Flotation
BinomCI(x=32, n=206, conf.level=0.95, method="clopper-pearson")
library("VennDiagram")
raw.data <- read.csv("/home/victor/Dokumente/Git_projects/Mouse_Eimeria_Databasing/raw_data/Inventory_contents_all.csv")
olnames(raw.data) <- c("Year", "Transect", "Code", "Mouse_ID", "Worms", "IntCO", "IntDNA", "CECE",
"CECE_DNA", "COCE", "COCE_DNA", "Flot", "Ap5", "n18S", "n18S_Seq", "COI",
"COI_Seq", "ORF470", "ORF470_Seq", "SSU", "LSU")
View(raw.data)
colnames(raw.data) <- c("Year", "Transect", "Code", "Mouse_ID", "Worms", "IntCO", "IntDNA", "CECE",
"CECE_DNA", "COCE", "COCE_DNA", "Flot", "Ap5", "n18S", "n18S_Seq", "COI",
"COI_Seq", "ORF470", "ORF470_Seq", "SSU", "LSU")
View(raw.data)
clean.data <- raw.data[-c(5:11,20,21)]
View(clean.data)
DB_Total <- subset(clean.data, Ap5 == "TRUE" | Ap5 == "FALSE" | Flot == "TRUE")
View(DB_Total)
grid.newpage()
draw.triple.venn(area1 = nrow(subset(DB_Total, n18S_Seq == "TRUE")), area2 = nrow(subset(DB_Total, COI_Seq == "TRUE")),
area3 = nrow(subset(DB_Total, ORF470_Seq == "TRUE")), n12 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&COI_Seq== "TRUE")),
n23 = nrow(subset(DB_Total, COI_Seq== "TRUE"&ORF470_Seq =="TRUE")), n13 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&ORF470_Seq == "TRUE")),
n123 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&ORF470_Seq == "TRUE"&COI_Seq=="TRUE")), category = c("18S", "COI", "ORF470"),
lty = rep(1,3), col = c("dodgerblue4", "firebrick3", "darkgreen"), lwd = rep(2,3),
fill = c("dodgerblue4", "firebrick3", "darkgreen"), alpha = c(0.3, 0.3, 0.3), cex =2, cat.cex = 2.5, cat.pos = c(0.5, 0.5, 0.5),
cat.col = c("dodgerblue4", "firebrick3", "darkgreen"))
grid.newpage()
draw.triple.venn(area1 = nrow(subset(DB_Total, n18S_Seq == "TRUE")), area2 = nrow(subset(DB_Total, COI_Seq == "TRUE")),
area3 = nrow(subset(DB_Total, ORF470_Seq == "TRUE")), n12 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&COI_Seq== "TRUE")),
n23 = nrow(subset(DB_Total, COI_Seq== "TRUE"&ORF470_Seq =="TRUE")), n13 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&ORF470_Seq == "TRUE")),
n123 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&ORF470_Seq == "TRUE"&COI_Seq=="TRUE")), category = c("18S", "COI", "ORF470"),
lty = rep(1,3), col = c("dodgerblue4", "firebrick3", "darkgreen"), lwd = rep(2,3),
fill = c("dodgerblue4", "firebrick3", "darkgreen"), alpha = c(0.3, 0.3, 0.3), cex =2, cat.cex = 2.5, cat.default.pos = 'outer',
cat.col = c("dodgerblue4", "firebrick3", "darkgreen"))
library("VennDiagram")
raw.data <- read.csv("/home/victor/Dokumente/Git_projects/Mouse_Eimeria_Databasing/raw_data/Inventory_contents_all.csv")
View(raw.data)
colnames(raw.data) <- c("Year", "Transect", "Code", "Mouse_ID", "Worms", "IntCO", "IntDNA", "CECE",
"CECE_DNA", "COCE", "COCE_DNA", "Flot", "Ap5", "n18S", "n18S_Seq", "COI",
"COI_Seq", "ORF470", "ORF470_Seq", "SSU", "LSU")
View(raw.data)
clean.data <- raw.data[-c(5:11,20,21)]
View(clean.data)
DB_Total <- subset(clean.data, Ap5 == "TRUE" | Ap5 == "FALSE" | Flot == "TRUE" | ORF470 == "TRUE")
grid.newpage()
draw.triple.venn(area1 = nrow(subset(DB_Total, n18S_Seq == "TRUE")), area2 = nrow(subset(DB_Total, COI_Seq == "TRUE")),
area3 = nrow(subset(DB_Total, ORF470_Seq == "TRUE")), n12 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&COI_Seq== "TRUE")),
n23 = nrow(subset(DB_Total, COI_Seq== "TRUE"&ORF470_Seq =="TRUE")), n13 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&ORF470_Seq == "TRUE")),
n123 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&ORF470_Seq == "TRUE"&COI_Seq=="TRUE")), category = c("18S", "COI", "ORF470"),
lty = rep(1,3), col = c("dodgerblue4", "firebrick3", "darkgreen"), lwd = rep(2,3),
fill = c("dodgerblue4", "firebrick3", "darkgreen"), alpha = c(0.3, 0.3, 0.3), cex =2, cat.cex = 2.5, cat.default.pos = 'outer',
cat.col = c("dodgerblue4", "firebrick3", "darkgreen"))
nrow(subset(DB_Total, n18S_Seq == "TRUE"))
subset(DB_Total, n18S_Seq == "TRUE")
raw.data <- read.csv("/home/victor/Dokumente/Git_projects/Mouse_Eimeria_Databasing/raw_data/Inventory_contents_all.csv")
colnames(raw.data) <- c("Year", "Transect", "Code", "Mouse_ID", "Worms", "IntCO", "IntDNA", "CECE",
"CECE_DNA", "COCE", "COCE_DNA", "Flot", "Ap5", "n18S", "n18S_Seq", "COI",
"COI_Seq", "ORF470", "ORF470_Seq", "SSU", "LSU")
clean.data <- raw.data[-c(5:11,20,21)]
DB_Total <- subset(clean.data, Ap5 == "TRUE" | Ap5 == "FALSE" | Flot == "TRUE" | ORF470 == "TRUE")
nrow(subset(DB_Total, n18S_Seq == "TRUE"))
grid.newpage()
draw.triple.venn(area1 = nrow(subset(DB_Total, n18S_Seq == "TRUE")), area2 = nrow(subset(DB_Total, COI_Seq == "TRUE")),
area3 = nrow(subset(DB_Total, ORF470_Seq == "TRUE")), n12 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&COI_Seq== "TRUE")),
n23 = nrow(subset(DB_Total, COI_Seq== "TRUE"&ORF470_Seq =="TRUE")), n13 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&ORF470_Seq == "TRUE")),
n123 = nrow(subset(DB_Total, n18S_Seq == "TRUE"&ORF470_Seq == "TRUE"&COI_Seq=="TRUE")), category = c("18S", "COI", "ORF470"),
lty = rep(1,3), col = c("dodgerblue4", "firebrick3", "darkgreen"), lwd = rep(2,3),
fill = c("dodgerblue4", "firebrick3", "darkgreen"), alpha = c(0.3, 0.3, 0.3), cex =2, cat.cex = 2.5, cat.default.pos = 'outer',
cat.col = c("dodgerblue4", "firebrick3", "darkgreen"))
rm(list = ls())
ource("https://raw.githubusercontent.com/derele/Mouse_Eimeria_Databasing/master/R/HMHZ_Functions.R")
source("https://raw.githubusercontent.com/derele/Mouse_Eimeria_Databasing/master/R/HMHZ_Functions.R")
GenDF <- make.gen.DF()
raw.data <- read.csv("/home/victor/Dokumente/Sequences/Samples_2014_2015/Sequences_14_15_16_2.csv", na.strings=c("","NA"))
names(raw.data)[4]<-"Mouse_ID"
as.character(raw.data$Mouse_ID)
raw.data$Mouse_ID <- gsub(pattern = " ", replacement = "", x = raw.data$Mouse_ID)
merge.data <- merge(GenDF, raw.data, by= "Mouse_ID")
require(devtools)
devtools::install_github("derele/MultiAmplicon")
if (!require("gplots")) {
install.packages("gplots", dependencies = TRUE)
library(gplots)
}
if (!require("RColorBrewer")) {
install.packages("RColorBrewer", dependencies = TRUE)
library(RColorBrewer)
}
data <- read.csv("../victor/Dokumente/Sequences/Samples_2017/COI/Identity_matrix_COI_All_2014_2017.csv", comment.char="#")
View(data)
rnames <- data[,1]
mat_data <- data.matrix(data)
rownames(mat_data) <- rnames
my_palette <- colorRampPalette(c("red", "yellow", "blue"))(n = 299))
source('~/.active-rstudio-document', echo=TRUE)
my_palette <- colorRampPalette(c("red", "yellow", "blue"))(n = 299)
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
#col=my_palette,       # use on color palette defined earlier
breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
#breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
heat heatmap.2(data)
heat heatmap.2(mat_data)
heatmap.2(mat_data)
heatmap.2(data)
mat_data <- data.matrix(data[,2:ncol(data)])
rownames(mat_data) <- rnames
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(12,9),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
#breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(120,90),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
#breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
heatmap.2(mat_data,
cellnote = mat_data,  # same data set for cell labels
main = "Correlation", # heat map title
notecol="black",      # change font color of cell labels to black
density.info="none",  # turns off density plot inside color legend
trace="none",         # turns off trace lines inside the heat map
margins =c(100,50),     # widens margins around plot
col=my_palette,       # use on color palette defined earlier
#breaks=col_breaks,    # enable color transition at specified limits
dendrogram="row",     # only draw a row dendrogram
Colv="NA")            # turn off column clustering
library(MultiAmplicon)
fastq.dir <- system.file("extdata", "fastq", package = "MultiAmplicon")
fastq.files <- list.files(fastq.dir, full.names=TRUE)
Ffastq.file <- fastq.files[grepl("F_filt", fastq.files)]
Rfastq.file <- fastq.files[grepl("R_filt", fastq.files)]
names(Rfastq.file) <- names(Ffastq.file) <-
gsub("_F_filt\\.fastq\\.gz", "", basename(Ffastq.file))
PRF <- PairedReadFileSet(Ffastq.file, Rfastq.file)
primerF <- c(Amp1F = "AGAGTTTGATCCTGGCTCAG", Amp2F = "ACTCCTACGGGAGGCAGC",
Amp3F = "GAATTGACGGAAGGGCACC", Amp4F = "YGGTGRTGCATGGCCGYT",
Amp5F = "AAAAACCCCGGGGGGTTTTT", Amp6F = "AGAGTTTGATCCTGCCTCAG")
primerR <- c(Amp1R = "CTGCWGCCNCCCGTAGG", Amp2R = "GACTACHVGGGTATCTAATCC",
Amp3R = "AAGGGCATCACAGACCTGTTAT", Amp4R = "TCCTTCTGCAGGTTCACCTAC",
Amp5R = "AAAAACCCCGGGGGGTTTTT", Amp6R = "CCTACGGGTGGCAGATGCAG")
PPS <- PrimerPairsSet(primerF, primerR)
MA <- MultiAmplicon(PPS, PRF)
MA1 <- sortAmplicons(MA)
knitr::kable(rawCounts(MA1))
clusters <- plotAmpliconNumbers(MA1)
two.clusters.row <- cutree(clusters$tree_row, k=2)
two.clusters.col <- cutree(clusters$tree_col, k=2)
knitr::kable(two.clusters.row)
knitr::kable(two.clusters.col)
MA.sub <- MA1[which(two.clusters.row==1), which(two.clusters.col==2)]
knitr::kable(rawCounts(MA.sub))
errF <- learnErrors(unlist(stratifiedFilesF(MA1)), verbose=0)
errR <- learnErrors(unlist(stratifiedFilesR(MA1)), verbose=0)
MA2 <- derepMulti(MA.sub, mc.cores=1)
MA3 <- dadaMulti(MA2, Ferr=errF, Rerr=errR,  pool=FALSE)
MA4 <- mergeMulti(MA3, justConcatenate=TRUE)
MA5 <- sequenceTableMulti(MA4)
MA6 <- noChimeMulti(MA5, mc.cores=1)
setwd("/home/victor/Dokumente/Git_projects/Mouse_Eimeria_Databasing/raw_data/Eimeria_detection/")
read.csv("Inventory_contents_all.csv")
pcr.data <- read.csv("Inventory_contents_all.csv")
View(pcr.data)
View(pcr.data)
pcr.data[-c(5:11,14, 16, 18, 20,21)]
pcr.data <- pcr.data[-c(5:11,14, 16, 18, 20,21)]
setwd("/home/victor/Dokumente/Git_projects/Mouse_Eimeria_Databasing/raw_data/Eimeria_detection/")
pcr.data <- read.csv("Inventory_contents_all.csv")
pcr.data[,-c(5:11)]
pcr.data[-c(5:11)]
subset(pcr.data, pcr.data$X1_Year == "2017")
subset(pcr.data, pcr.data$X1_Year == "2017" | pcr.data$X12_Ap5_PCR == "positive" | pcr.data$X11_Flotation == "positive")
pcr.data <- pcr.data[-c(5:11,14, 16, 18, 20,21)]
colnames(pcr.data) <- c("Year", "Transect", "Code", "Mouse_ID", "Flot", "Ap5", "n18S_Seq",
"COI_Seq", "ORF470_Seq")
View(pcr.data)
View(pcr.data)
subset(pcr.data, pcr.data$Year == "2017")
results.2017 <- subset(pcr.data, pcr.data$Year == "2017")
View(results.2017)
length(which(results.2017$Ap5 == "positive"))
length(which(results.2017$Ap5 == "positive" | results.2017$Flot == "negative"))
length(results.2017[!is.na(results.2017$Ap5 == "positive" | results.2017$Flot == "negative")])
length(results.2017$Ap5[!is.na(results.2017$Ap5 == "positive")])
View(results.2017)
length(which(results.2017$Ap5 == "positive" | results.2017$Flot == "negative"))
length(which(results.2017$Ap5 == "positive" | results.2017$Flot == "positive"))
length(which(results.2017$Ap5 == "positive" & results.2017$Flot == "positive"))
View(results.2017)
na.omit(results.2017$Flot & results.2017$Ap5)
View(results.2017)
results.2017$Ap5 == "positive" & results.2017$Ap5 == "negative"
na.omit(results.2017$Ap5 == "positive" & results.2017$Ap5 == "negative")
Ap5 <- na.omit(results.2017$Ap5 == "positive" & results.2017$Ap5 == "negative")
subset(results.2017, results.2017$Ap5 == "positive" | results.2017$Ap5 == "negative")
Ap5 <- subset(results.2017, results.2017$Ap5 == "positive" | results.2017$Ap5 == "negative")
final.data <- subset(Ap5, Ap5$Flot == "positive" | Ap5$Flot == "negative")
subset(Ap5, Ap5$Flot == "positive" | Ap5$Flot == "negative")
subset(Ap5, Ap5$Flot == "positive" | Ap5$Flot == "negative")
View(Ap5)
Ap5, Ap5$Flot == "positive"
setwd("/home/victor/Dokumente/Git_projects/Mouse_Eimeria_Databasing/raw_data/Eimeria_detection/") ##You need to change it!
# read the file and give it a name
pcr.data <- read.csv("Inventory_contents_all.csv")
#eliminate all the information that you won't need (optional)
pcr.data <- pcr.data[-c(5:11,14, 16, 18, 20,21)]
#change columns names (optional)
colnames(pcr.data) <- c("Year", "Transect", "Code", "Mouse_ID", "Flot", "Ap5", "n18S_Seq",
"COI_Seq", "ORF470_Seq")
#create a new variable with date from one specific year
results.2017 <- subset(pcr.data, pcr.data$Year == "2017")
Ap5 <- subset(results.2017, results.2017$Ap5 == "positive" | results.2017$Ap5 == "negative")
subset(Ap5, Ap5$Flot == "positive" | Ap5$Flot == "negative")
as.data.frame(Ap5)
Ap5 <- as.data.frame(Ap5)
subset(Ap5, Ap5$Flot == "positive" | Ap5$Flot == "negative")
Ap5 <- as.data.frame(Ap5)
Ap5
Res.Ap5 <- subset(results.2017, results.2017$Ap5 == "positive" | results.2017$Ap5 == "negative")
Res.Ap5 <- as.data.frame(Res.Ap5)
Flotation <- subset(results.2017, results.2017$Flot == "positive" | results.2017$Flot == "negative")
View(Flotation)
View(Flotation)
Flotation[-c(1:3,6:)]
Flotation[-c(1:3,6:9)]
Flotation <- Flotation[-c(1:3,6:9)]
merge(Res.Ap5, Flotation, by = "Mouse_ID")
Final.data <- merge(Res.Ap5, Flotation, by = "Mouse_ID")
View(Final.data)
Final.data[-10]
Final.data <- Final.data[-10]
colnames(Final.data) <- colnames(pcr.data) <- c("Year", "Transect", "Code", "Mouse_ID", "Flot", "Ap5", "n18S_Seq",
"COI_Seq", "ORF470_Seq")
View(Final.data)
colnames(Final.data) <- colnames(pcr.data) <- c("Mouse_ID", "Year", "Transect", "Code", "Flot", "Ap5", "n18S_Seq",
"COI_Seq", "ORF470_Seq")
length(which(Final.data$Ap5 == "positive" & Final.data$Flot == "negative"))
length(which(Final.data$Ap5 == "positive" & c(Final.data$n18S_Seq == "positive" | Final.data$COI_Seq == "positive" | Final.data$ORF470_Seq == "positive"))
length(which(Final.data$Ap5 == "positive" & Final.data$Flot == "negative"))
length(which(Final.data$Ap5 == "positive" & Final.data$Flot == "negative"))
length(which(c(Final.data$n18S_Seq == "positive" | Final.data$COI_Seq == "positive" | Final.data$ORF470_Seq == "positive"))
length(which(Final.data$Ap5 == "positive" & Final.data$Flot == "negative"))
library("VennDiagram")
library(grid)
library(gridExtra)
grid.newpage()
draw.triple.venn(area1 = nrow(subset(Final.data$Ap5, n18S_Seq == "positive")), area2 = nrow(subset(Final.data$Ap5, COI_Seq == "positive")),
area3 = nrow(subset(Final.data$Ap5, ORF470_Seq == "positive")), n12 = nrow(subset(Final.data$Ap5, n18S_Seq == "positive"&COI_Seq== "positive")),
n23 = nrow(subset(Final.data$Ap5, COI_Seq== "positive"&ORF470_Seq =="positive")), n13 = nrow(subset(Final.data$Ap5, n18S_Seq == "positive"&ORF470_Seq == "positive")),
n123 = nrow(subset(Final.data$Ap5, n18S_Seq == "positive"&ORF470_Seq == "positive"&COI_Seq=="positive")), category = c("18S", "COI", "ORF470"),
lty = rep(1,3), col = c("dodgerblue4", "firebrick3", "darkgreen"), lwd = rep(2,3),
fill = c("dodgerblue4", "firebrick3", "darkgreen"), alpha = c(0.3, 0.3, 0.3), cex =2, cat.cex = 2.5, cat.default.pos = 'outer',
cat.col = c("dodgerblue4", "firebrick3", "darkgreen"))
grid.newpage()
draw.triple.venn(area1 = nrow(subset(Res.Ap5, n18S_Seq == "positive")), area2 = nrow(subset(Res.Ap5, COI_Seq == "positive")),
area3 = nrow(subset(Res.Ap5, ORF470_Seq == "positive")), n12 = nrow(subset(Res.Ap5, n18S_Seq == "positive"&COI_Seq== "positive")),
n23 = nrow(subset(Res.Ap5, COI_Seq== "positive"&ORF470_Seq =="positive")), n13 = nrow(subset(Res.Ap5, n18S_Seq == "positive"&ORF470_Seq == "positive")),
n123 = nrow(subset(Res.Ap5, n18S_Seq == "positive"&ORF470_Seq == "positive"&COI_Seq=="positive")), category = c("18S", "COI", "ORF470"),
lty = rep(1,3), col = c("dodgerblue4", "firebrick3", "darkgreen"), lwd = rep(2,3),
fill = c("dodgerblue4", "firebrick3", "darkgreen"), alpha = c(0.3, 0.3, 0.3), cex =2, cat.cex = 2.5, cat.default.pos = 'outer',
cat.col = c("dodgerblue4", "firebrick3", "darkgreen"))
length(which(Final.data$Ap5 == "positive" & Final.data$Flot == "negative"))
##Julia Analysis Flotation vs PCR
# Set Local folder where is the file of interest, only for Julia's computer ;)
setwd("/home/victor/Dokumente/Git_projects/Mouse_Eimeria_Databasing/raw_data/Eimeria_detection/") ##You need to change it!
# read the file and give it a name
pcr.data <- read.csv("Inventory_contents_all.csv")
#eliminate all the information that you won't need (optional)
pcr.data <- pcr.data[-c(5:11,14, 16, 18, 20,21)]
#change columns names (optional)
colnames(pcr.data) <- c("Year", "Transect", "Code", "Mouse_ID", "Flot", "Ap5", "n18S_Seq",
"COI_Seq", "ORF470_Seq")
#create a new variable with date from one specific year
results.2017 <- subset(pcr.data, pcr.data$Year == "2017")
View(results.2017)
na.omit(results.2017$Ap5)
is.na(results.2017$Ap5)
!is.na(results.2017$Ap5)
results.2017[!is.na(results.2017$Ap5)]
results.2017[!is.na(results.2017$Ap5),]
!is.na(results.2017$Ap5)
results.2017$Ap5
results.2017$Flot
table(results.2017$Flot)
table(results.2017$Flot, useNA = T)
?table
table(results.2017$Flot, useNA = "all")
table(results.2017$Flot, useNA = "always")
Flotation <- subset(results.2017, results.2017$Flot == "positive" | results.2017$Flot == "negative")
View(Flotation)
table(results.2017$Flot, useNA = "always")
subset(x = results.2017,
subset = (results.2017$Flot == "positive" | results.2017$Flot == "negative") & !is.na(results.2017$Ap5)
)
finalData <- subset(x = results.2017,
subset = (results.2017$Flot == "positive" | results.2017$Flot == "negative") & !is.na(results.2017$Ap5)
)
View(finalData)
finalData <- subset(x = results.2017,
subset = (results.2017$Flot == "positive" | results.2017$Flot == "negative") & !is.na(results.2017$Ap5)
)
View(finalData)
finalData <- subset(x = results.2017,
subset = (results.2017$Flot %in% "positive" | results.2017$Flot %in% "negative") & !is.na(results.2017$Ap5)
)
finalData <- subset(x = results.2017,
subset = (results.2017$Flot %in% ("positive" | "negative")) & !is.na(results.2017$Ap5)
)
finalData <- subset(x = results.2017,
subset = (results.2017$Flot %in% c("positive", "negative")) & !is.na(results.2017$Ap5)
)
finalData <- subset(x = results.2017,
subset = (results.2017$Flot == c("positive", "negative")) & !is.na(results.2017$Ap5)
)
finalData <- subset(x = results.2017,
subset = (results.2017$Flot %in% c("positive", "negative")) & !is.na(results.2017$Ap5)
)
View(finalData)
c(Final.data$n18S_Seq == "positive" | Final.data$COI_Seq == "positive" | Final.data$ORF470_Seq == "positive")
c(finalData$n18S_Seq == "positive" | finalData$COI_Seq == "positive" | finalData$ORF470_Seq == "positive")
which(c(finalData$n18S_Seq == "positive" | finalData$COI_Seq == "positive" | finalData$ORF470_Seq == "positive"))
length(which(c(finalData$n18S_Seq == "positive" | finalData$COI_Seq == "positive" | finalData$ORF470_Seq == "positive")))
setwd("/home/victor/Dokumente/Git_projects/Mouse_Eimeria_Databasing/raw_data/Eimeria_detection/") ##You need to change it!
pcr.data <- read.csv("Inventory_contents_all.csv")
pcr.data <- pcr.data[-c(5:11,14, 16, 18, 20,21)]
colnames(pcr.data) <- c("Year", "Transect", "Code", "Mouse_ID", "Flot", "Ap5", "n18S_Seq",
"COI_Seq", "ORF470_Seq")
results.2017 <- subset(pcr.data, pcr.data$Year == "2017")
View(results.2017)
table(results.2017$Flot, useNA = "always")
Flotation <- subset(results.2017, results.2017$Flot == "positive" | results.2017$Flot == "negative")
finalData <- subset(x = results.2017,
subset = (results.2017$Flot %in% ("positive" | "negative")) & !is.na(results.2017$Ap5))
finalData <- subset(x = results.2017,
subset = (results.2017$Flot %in% ("positive" | "negative")) & !is.na(results.2017$Ap5))
finalData <- subset(x = results.2017,
subset = (results.2017$Flot %in% c("positive" | "negative")) & !is.na(results.2017$Ap5))
finalData <- subset(x = results.2017,
subset = (results.2017$Flot %in% c("positive", "negative")) & !is.na(results.2017$Ap5))
length(which(c(finalData$n18S_Seq == "positive" | finalData$COI_Seq == "positive" | finalData$ORF470_Seq == "positive")))
length(which(finalData$Ap5 %in% "positive" &
c(finalData$n18S_Seq == "positive" | finalData$COI_Seq == "positive" | finalData$ORF470_Seq == "positive")))
getwd()
setwd("/home/victor/Dokumente/Git_projects/Mouse_Eimeria_Databasing/R/") ##You need to change it!
setwd("../raw_data/Eimeria_detection/")
View(finalData)
length(which(finalData$Ap5 %in% "positive" &
c(finalData$n18S_Seq == "positive" | finalData$COI_Seq == "positive" | finalData$ORF470_Seq == "positive")))
length(which(finalData$Ap5 %in% "positive"))
length(which(finalData$Ap5 %in% "positive" &
c(finalData$n18S_Seq == "positive" | finalData$COI_Seq == "positive" | finalData$ORF470_Seq == "positive")))
length(which(finalData$Flot %in% "positive"))
length(which(finalData$Flot %in% "positive") &
c(finalData$n18S_Seq == "positive" | finalData$COI_Seq == "positive" | finalData$ORF470_Seq == "positive")))
length(which(finalData$Flot %in% "positive" &
c(finalData$n18S_Seq == "positive" | finalData$COI_Seq == "positive" | finalData$ORF470_Seq == "positive")))
setwd("../raw_data/Eimeria_detection/")
# read the file and give it a name
pcr.data <- read.csv("Inventory_contents_all.csv")
#eliminate all the information that you won't need (optional)
pcr.data <- pcr.data[-c(5:11,14, 16, 18, 20,21)]
#change columns names (optional)
colnames(pcr.data) <- c("Year", "Transect", "Code", "Mouse_ID", "Flot", "Ap5", "n18S_Seq",
"COI_Seq", "ORF470_Seq")
results.2017 <- subset(pcr.data, pcr.data$Year == "2017")
View(results.2017)
na.omit(results.2017$Ap5)
table(results.2017$Flot, useNA = "always")
finalData <- subset(x = results.2017,
subset = (results.2017$Flot %in% c("positive", "negative")) & !is.na(results.2017$Ap5))
View(finalData)
library("VennDiagram")
library(grid)
library(gridExtra)
grid.newpage()
draw.triple.venn(area1 = nrow(subset(finalData, n18S_Seq == "positive")), area2 = nrow(subset(finalData, COI_Seq == "positive")),
area3 = nrow(subset(finalData, ORF470_Seq == "positive")), n12 = nrow(subset(finalData, n18S_Seq == "positive"&COI_Seq== "positive")),
n23 = nrow(subset(finalData, COI_Seq== "positive"&ORF470_Seq =="positive")), n13 = nrow(subset(finalData, n18S_Seq == "positive"&ORF470_Seq == "positive")),
n123 = nrow(subset(finalData, n18S_Seq == "positive"&ORF470_Seq == "positive"&COI_Seq=="positive")), category = c("18S", "COI", "ORF470"),
lty = rep(1,3), col = c("dodgerblue4", "firebrick3", "darkgreen"), lwd = rep(2,3),
fill = c("dodgerblue4", "firebrick3", "darkgreen"), alpha = c(0.3, 0.3, 0.3), cex =2, cat.cex = 2.5, cat.default.pos = 'outer',
cat.col = c("dodgerblue4", "firebrick3", "darkgreen"))
